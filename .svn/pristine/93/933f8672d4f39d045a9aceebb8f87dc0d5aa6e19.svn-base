#include <types.h>
#include <kern/errno.h>
#include <lib.h>
#include <thread.h>
#include <curthread.h>
#include <addrspace.h>
#include <vm.h>
#include <machine/spl.h>
#include <machine/tlb.h>

#define DUMBVM_STACKPAGES    12

/*
 * Note! If OPT_DUMBVM is set, as is the case until you start the VM
 * assignment, this file is not compiled or linked or in any way
 * used. The cheesy hack versions in dumbvm.c are used instead.
 */

int create_first_pt(struct addrspace* as){
    as->first_pte = kmalloc(sizeof(struct firstpte) * NUM_PTE);
    if(as->first_pte == NULL){
        kprintf("Out of memory when creating master page table.");
        return ENOMEM;
    }

    int i;
    for(i = 0; i < NUM_PTE; i++){
        as->first_pte[i].second_pte = NULL;
    }

    return 0;
}

int create_second_pt(struct firstpte* first_pte){
    first_pte->second_pte = kmalloc(sizeof(struct secondpte) * NUM_PTE);
    if(first_pte->second_pte == NULL){
        kprintf("Out of memory when creating secondary page table.");
        return ENOMEM;
    }

    int i;
    for(i = 0; i < NUM_PTE; i++){
        first_pte->second_pte[i].frame = 0;
        first_pte->second_pte[i].valid = 0;
        first_pte->second_pte[i].read_only = 0;
    }

    return 0;
}

struct addrspace *
as_create(void)
{
	struct addrspace *as = kmalloc(sizeof(struct addrspace));
	if (as==NULL) {
        kprintf("Out of memory when creating addrspace.");
		return NULL;
	}

    as->first_pte = NULL;
    as->reg = NULL;

	result = create_first_pt(as);
	if(result){
        return NULL;
	}

	return as;
}

int
as_copy(struct addrspace *old, struct addrspace **ret)
{
	struct addrspace *newas;

	newas = as_create();
	if (newas==NULL) {
		return ENOMEM;
	}
    /*
     * After as_create(), newas is allocated size of addrspace.
     * newas->reg is set to NULL and newas->first_pte is allocated size of firstpte * NUM_PTE;
     * newas->first_pte[0:NUM_PTE].second_pte are set to NULL.
     */

    int i,j,res;
    for(i = 0; i < NUM_PTE; i++){
        if(old->first_pte[i].second_pte != NULL){
            res = create_second_pt(newas->first_pte[i]);
            if(res != 0){
                return res;
            }
            for(j = 0; j < NUM_PTE; j++){
                newas->first_pte[i].second_pte[j].frame = old->first_pte[i].second_pte[j].frame;
                newas->first_pte[i].second_pte[j].valid = old->first_pte[i].second_pte[j].valid;
                newas->first_pte[i].second_pte[j].read_only = 1; // set second_pte to read only
            }
        }
    }

    while(old->reg != NULL){
        res = as_define_region(old->reg->v,old->reg->offset,newas,old->reg->vbase,old->reg->filesize,
                               old->reg->readable,old->reg->writable,old->reg->executable);
        old->reg = old->reg->next;
    }

	*ret = newas;
	return 0;
}

void
as_destroy(struct addrspace *as)
{
	int i,j;
    for(i = 0; i < NUM_PTE; i++){
        if(as->first_pte[i].second_pte == NULL){
            continue;
        } else {
            for(j = 0; j < NUM_PTE; j++){
                if(as->first_pte[i].second_pte[j].valid == 1){
                    int page_num;
                    page_num = (i << 10) | j;
                    page_num <<= 12;

                    unmap(curthread->pid,page_num); // unmap() is defined in vm.c
                }
            }
            kfree(as->first_pte[i].second_pte);
        }
    }
    kfree(as->first_pte);
	kfree(as);
}

void
as_activate(struct addrspace *as)
{
    /* Purely copied from dumbvm.c */
    int i, spl;

    (void)as;

    spl = splhigh();

    for (i=0; i<NUM_TLB; i++) {
        TLB_Write(TLBHI_INVALID(i), TLBLO_INVALID(), i);
    }

    splx(spl);
}

/*
 * Set up a segment at virtual address VADDR of size MEMSIZE. The
 * segment in memory extends from VADDR up to (but not including)
 * VADDR+MEMSIZE.
 *
 * The READABLE, WRITEABLE, and EXECUTABLE flags are set if read,
 * write, or execute permission should be set on the segment. At the
 * moment, these are ignored. When you write the VM system, you may
 * want to implement them.
 */
int
as_define_region(struct vnode* v, off_t offset, struct addrspace *as, vaddr_t vaddr, size_t sz,
                 int readable, int writable, int executable)
{
    size_t npages;  // number of pages in this region

    sz += vaddr & ~(vaddr_t)PAGE_FRAME; // PAGE_FRAME is defined in vm.h, which is a mask
    vaddr &= PAGE_FRAME;

    sz = ((sz - 1) + PAGE_SIZE) & PAGE_FRAME;

    npages = sz / PAGE_SIZE;    // PAGE_SIZE is defined in vm.h, npages = total size / page size
    //********************************************
    kprintf("Number of pages: i=%d\n", npages);
    //********************************************

    if(as->reg == NULL){
        as->reg = kmalloc(sizeof(struct region));
        if(as->reg == NULL){
            return ENOMUM;
        }
        as->reg->npages = npages;
        as->reg->vbase = vaddr;
        as->reg->readable = readable;
        as->reg->writable = writable;
        as->reg->executable = executable;
        as->reg->v = v;
        as->reg->offset = offset;
        as->reg->filesize = sz;
        as->reg->next = NULL; //********************************************
        as->reg->in_stack = 0;  // this region is not stack
    } else {
        struct region* new_region;
        struct region* previous;

        new_region = as->reg;   // head of the region linked list
        while(new_region != NULL){
            previous = new_region;
            new_region = new_region->next;
        }
        //********************************************
        kprintf("End of loop, new_region == NULL now");
        //********************************************
        new_region = kmalloc(sizeof(struct region));
        if(new_region == NULL){
            return ENOMUM;
        }
        new_region->npages = npages;
        new_region->vbase = vaddr;
        new_region->readable = readable;
        new_region->writable = writable;
        new_region->executable = executable;
        new_region->v = v;
        new_region->offset = offset;
        new_region->filesize = sz;
        new_region->next = NULL; //********************************************
        new_region->in_stack = 0;   // this region is not stack

        previous->next = new_region;
    }
    return 0;
}

int
as_prepare_load(struct addrspace *as)
{
	/*
	 * Write this.
	 */

	(void)as;
	return 0;
}

int
as_complete_load(struct addrspace *as)
{
	/*
	 * Write this.
	 */

	(void)as;
	return 0;
}

int
as_define_stack(struct addrspace *as, vaddr_t vaddr)
{
    if(as->reg == NULL){
        as->reg = kmalloc(sizeof(struct region));
        if(as->reg == NULL){
            return ENOMEM;
        }
        as->reg->npages = 0;
        as->reg->vbase = vaddr;
        as->reg->readable = 1;
        as->reg->writable = 1;
        as->reg->executable = 0;
        as->reg->v = NULL;      // no need because this is stack
        as->reg->offset = 0;    // no need because this is stack
        as->reg->filesize = 0;  // no need because this is stack
        as->reg->next = NULL;   // no need because this is stack
        as->reg->in_stack = 1;  // this region is stack
    } else {
        struct region* new_region;
        struct region* previous;

        new_region = as->reg;   // head of the region linked list
        while(new_region != NULL){
            previous = new_region;
            new_region = new_region->next;
        }
        new_region = kmalloc(sizeof(struct region));
        if(new_region == NULL){
            return ENOMUM;
        }
        new_region->npages = 0;
        new_region->vbase = vaddr;
        new_region->readable = 1;
        new_region->writable = 1;
        new_region->executable = 0;
        new_region->v = NULL;       // no need because this is stack
        new_region->offset = 0;     // no need because this is stack
        new_region->filesize = 0;   // no need because this is stack
        new_region->next = NULL;    // no need because this is stack
        new_region->in_stack = 1;   // this region is stack

        previous->next = new_region;
    }
	return 0;
}


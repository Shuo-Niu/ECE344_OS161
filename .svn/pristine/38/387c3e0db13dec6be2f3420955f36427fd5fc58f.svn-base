#include <types.h>
#include <kern/errno.h>
#include <lib.h>
#include <machine/pcb.h>
#include <curthread.h>
#include <thread.h>
#include <synch.h>
#include <machine/spl.h>
#include <machine/trapframe.h>
#include <kern/callno.h>
#include <syscall.h>

#include <kern/unistd.h>

/*
 * System call handler.
 *
 * A pointer to the trapframe created during exception entry (in
 * exception.S) is passed in.
 *
 * The calling conventions for syscalls are as follows: Like ordinary
 * function calls, the first 4 32-bit arguments are passed in the 4
 * argument registers a0-a3. In addition, the system call number is
 * passed in the v0 register.
 *
 * On successful return, the return value is passed back in the v0
 * register, like an ordinary function call, and the a3 register is
 * also set to 0 to indicate success.
 *
 * On an error return, the error code is passed back in the v0
 * register, and the a3 register is set to 1 to indicate failure.
 * (Userlevel code takes care of storing the error code in errno and
 * returning the value -1 from the actual userlevel syscall function.
 * See src/lib/libc/syscalls.S and related files.)
 *
 * Upon syscall return the program counter stored in the trapframe
 * must be incremented by one instruction; otherwise the exception
 * return code will restart the "syscall" instruction and the system
 * call will repeat forever.
 *
 * Since none of the OS/161 system calls have more than 4 arguments,
 * there should be no need to fetch additional arguments from the
 * user-level stack.
 *
 * Watch out: if you make system calls that have 64-bit quantities as
 * arguments, they will get passed in pairs of registers, and not
 * necessarily in the way you expect. We recommend you don't do it.
 * (In fact, we recommend you don't use 64-bit quantities at all. See
 * arch/mips/include/types.h.)
 */

// int sleep = 0;
// int currentpid = -1;

void
mips_syscall(struct trapframe *tf)  // delegate the actual work of a system call to the kernel function that implements it
{
	int callno;
	int32_t retval;
	int err;

	assert(curspl==0);

	callno = tf->tf_v0;  // the system call number is passed in the v0 register

	/*
	 * Initialize retval to 0. Many of the system calls don't
	 * really return a value, just 0 for success and -1 on
	 * error. Since retval is the value returned on success,
	 * initialize it to 0 by default; thus it's not necessary to
	 * deal with it except for calls that return other values,
	 * like write.
	 */

	retval = 0;

	switch (callno) {
    case SYS_reboot:  // SYS_reboot == 8 (kern/include/kern/callno.h)
      err = sys_reboot(tf->tf_a0);
      break;

	    /* Add stuff here */
    case SYS_write:
      err = sys_write(tf->tf_a0,(void*)tf->tf_a1,tf->tf_a2,&retval);
      break;

    case SYS_read:
      err = sys_read(tf->tf_a0,(void*)tf->tf_a1,tf->tf_a2,&retval);
      break;

//    case SYS_fork:
//      err = sys_fork(tf,&retval);
//      break;
//
//    case SYS_getpid:
//      err = sys_getpid(&retval);
//      break;
//
//    case SYS_waitpid:
//      err = sys_waitpid(tf->tf_a0,(userptr_t)tf->tf_a1,tf->tf_a2,&retval);
//      break;
//
    case SYS__exit:
      err = sys__exit(tf->tf_a0);
      break;
//
//    case SYS_execv:
//      err = sys_execv((userptr_t)tf->tf_a0,(userptr_t)tf->tf_a1);
//      break;

    default:
      kprintf("Unknown syscall %d\n", callno);
      err = ENOSYS;
	}


	if (err) {
		/*
		 * Return the error code. This gets converted at
		 * userlevel to a return value of -1 and the error
		 * code in errno.
		 */
		tf->tf_v0 = err;
		tf->tf_a3 = 1;      /* signal an error */
	}
	else {
		/* Success. */
		tf->tf_v0 = retval;
		tf->tf_a3 = 0;      /* signal no error */
	}

	/*
	 * Now, advance the program counter, to avoid restarting
	 * the syscall over and over again.
	 */

	tf->tf_epc += 4;

	/* Make sure the syscall code didn't forget to lower spl */
	assert(curspl==0);
}

void
md_forkentry(struct trapframe *tf)  // a stub, where placing code to implement fork()
{
	/*
	 * This function is provided as a reminder. You need to write
	 * both it and the code that calls it.
	 *
	 * Thus, you can trash it and do things another way if you prefer.
	 */

	//(void)tf;

  //tf->tf_v0 = 0;
  //tf->tf_a3 = 0;

  //tf->tf_epc += 4;

  //mips_usermode(tf);
}

int sys_write(int fd, const void *buf, size_t nbytes, int *retval){

    if (fd != STDOUT_FILENO && fd != STDERR_FILENO){
        *retval = -1;   // return -1: error
        return EBADF;   // error: invalid file descriptor
    }

    if (buf == NULL){
        *retval = -1;   // return -1: error
        return EFAULT;  // error: invalid address space pointed to by buf
    }
//

    char* temp = kmalloc((nbytes+1)*sizeof(char));
    int status = copyin((const userptr_t)buf, (void*)temp, nbytes+1);

    if (status != 0) {
        kfree(temp);
        *retval = -1;   // return -1: error
        return EFAULT;  // error: invalid address space pointed to by buf

    } else {
        temp[nbytes] = '\0';
        kprintf("%s", temp);
        kfree(temp);
        *retval = nbytes;   // successful, return the count of bytes written
        return 0;   // no error
    }
}

int sys_read(int fd, void *buf, size_t buflen, int* retval){

    if (fd != STDIN_FILENO) {
        *retval = -1;   // return -1: error
        return EBADF;   // error: invalid file descriptor
    }

	if(buf == NULL){
        *retval = -1;   // return -1: error
        return EFAULT;  // error: invalid address space pointed to by buf
	}

	char* temp = kmalloc((buflen+1)*sizeof(char));

	int count = 0;
	int i;
	for(i=0;i<(int)buflen;i++){
		temp[i]=getch();
		count++;
		if(temp[i]=='\r')
			break;
	}
	temp[count] = '\0';

	int status = copyout((const void*)temp, (userptr_t)buf, count+1);

	if(status != 0){
        kfree(temp);
        *retval = -1;   // return -1: error
        return EFAULT;  // error: invalid address space pointed to by buf
	} else {
        kfree(temp);
        *retval = count;    // successful, return the count of bytes read
        return 0;   // no error
	}
}

int sys__exit(int exitcode){
    int spl = splhigh();

    set_excode(curthread->pid,exitcode);
    //set_exited(curthread->pid);

    splx(spl);

//    int i;
//    for(i=0;i<sleep;i++){
        V(curthread->wait);
//    }

    thread_exit();
    return 0;
}
